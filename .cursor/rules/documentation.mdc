---
description: 
globs: 
alwaysApply: true
---
# Documentation Best Practices

## Overview

This rule ensures comprehensive, up-to-date documentation throughout the project lifecycle. Proper documentation is essential for project continuity, collaboration, and long-term maintenance.

## Documentation Types

### 1. Planning Documentation

- **Project Brief**: High-level overview of the project's purpose, goals, and scope
- **Requirements Document**: Detailed specifications and acceptance criteria
- **Architecture/Design Plans**: System design, data models, workflows, etc.
- **Research Notes**: Findings from preliminary investigations

### 2. Development Documentation

- **Code Documentation**: Comments and docstrings within code
- **Technical Guides**: How the system works internally
- **API Documentation**: Endpoints, parameters, responses
- **Setup Instructions**: Environment configuration and requirements

### 3. User Documentation

- **User Guides**: How to use the project/system
- **FAQs**: Common questions and answers
- **Tutorials**: Step-by-step instructions for common tasks
- **Troubleshooting Guides**: Solutions to common problems

### 4. Process Documentation

- **Project Journal**: Daily/weekly progress entries
- **Meeting Notes**: Records of discussions and decisions
- **Change Log**: History of significant updates and changes
- **Issue Tracking**: Problems encountered and solutions implemented

## Documentation Guidelines

### 1. Structure and Organization

- Maintain a clear, hierarchical structure
- Use consistent formatting and templating
- Keep related documentation together
- Include a table of contents for longer documents

### 2. Writing Style

- Use clear, concise language
- Define technical terms and acronyms
- Include examples for complex concepts
- Separate instructions from explanations

### 3. Maintenance Procedures

- Update documentation alongside code changes
- Review documentation regularly for accuracy
- Mark outdated sections clearly until updated
- Version documentation when appropriate

### 4. Markdown Best Practices

- Use appropriate heading levels (# for title, ## for sections, etc.)
- Include code blocks with language specification for syntax highlighting
- Utilize lists, tables, and other formatting to enhance readability
- Add screenshots or diagrams for visual clarity

## Implementation Requirements

1. Create the documentation directory structure at project initialization
2. Start with a comprehensive README.md at the project root
3. Develop documentation templates for consistency
4. Update relevant documentation with each significant change
5. Verify documentation accuracy before finalizing project milestones

## Example Directory Structure

```
/docs
├── planning/
│   ├── project-brief.md
│   ├── requirements.md
│   └── design-plans.md
├── guides/
│   ├── setup-guide.md
│   ├── user-guide.md
│   └── developer-guide.md
├── reference/
│   ├── api-docs.md
│   └── architecture.md
└── process/
    ├── decisions.md
    └── change-log.md
```

Always update documentation timestamps when making changes. Use the date command to ensure accuracy:

```bash
date +"%Y-%m-%d %H:%M:%S"
```