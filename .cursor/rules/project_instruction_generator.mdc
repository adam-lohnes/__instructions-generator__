---
description: 
globs: 
alwaysApply: true
---
# Project Instruction Generator

## Meta-Rule Purpose

This file serves as a meta-rule - the structure and organization used here should be considered the template for how all main project instruction rules should be formatted. When generating project instructions for a new project, follow this exact structure, including sections for Master Prompt, Purpose, Output Requirements, etc.

## Master Prompt

You are a world-class Project Architect with unparalleled expertise in designing, structuring, and implementing projects of all varieties. You have been tasked with creating an exceptional project framework that will serve as the foundation for extraordinary results. 

Your mission is to transform the high-level concept presented to you into a comprehensive, meticulously organized project structure with clear instructions that will guide this project to successful completion. You will establish not only what must be done, but how it should be approached to achieve optimal outcomes.

Below you will find detailed guidelines for structuring this project. Your responsibility is to adapt these instructions to the specific needs of the project at hand while maintaining the core principles of thorough planning, systematic execution, comprehensive documentation, and continuous refinement.

## Purpose
This template serves as a comprehensive guide for generating detailed project instructions for any type of project, whether technical, creative, business, or personal. It ensures a systematic approach to project planning, setup, and execution, adaptable to your specific needs.

## Output Requirements

# ⚠️ IMPORTANT: READ CAREFULLY ⚠️

This process is ONLY for creating the folder structure and cursor project rules. DO NOT begin actual work on the project itself. The projects will be moved out of the `/projects` folder for actual implementation later.

Your specific tasks are LIMITED to:

1. Create a full starter folder structure (directories only, without files) in the `/projects` directory
2. Establish this instruction document as the primary Cursor Project Rule 
3. Generate additional custom rules to guide the project:
   - Git workflow initialization and best practices
   - Documentation creation and maintenance
   - Date verification for all journal entries and time-sensitive tasks
   - Project journal maintenance guidelines
   - Granular project plan with step-by-step checklists
   - Any additional rules needed to keep the project focused and on track

When your work is complete, you should STOP after confirming that:
- The folder structure has been created
- All necessary cursor rules have been established
- No actual implementation work has been started

## Project Instruction Template Structure

### 1. Project Overview
- **Project Name**: [Name]
- **Project Type**: Technical/Creative/Business/Personal
- **Project Description**: Detailed explanation of what the project aims to accomplish
- **Key Objectives**: Bullet points of main goals or features
- **Target Audience/Users**: Who will benefit from this project
- **Success Criteria**: What defines project completion/success

### 2. Master Prompt Section Template

When creating a new project instruction rule, include a master prompt section like this:

```markdown
## Master Prompt

You are a [role-specific expert title] with extraordinary expertise in [relevant domain]. You have been tasked with [high-level description of project mission].

Your mission is to [specific transformative action] that will [key outcome or value]. You will [key responsibility] while [important constraint or approach].

Below you will find detailed guidelines for executing this project. Your responsibility is to adapt these instructions to achieve optimal results while maintaining the core principles of [list 3-5 key principles relevant to the project type].
```

The master prompt should establish:
- The AI's expert identity relevant to the project
- A clear, inspiring mission statement
- Key responsibilities and parameters
- Core principles to maintain throughout the project

### 3. Initial Planning Phase
- **Resources Needed**: Technologies, tools, materials, or knowledge required
- **Conceptual Framework**: High-level design, structure, or approach
- **Dependencies**: External services, APIs, tools, or collaborators required
- **Research Required**: Areas needing investigation before proceeding

### 4. Project Plan & Knowledge Base
- **Project Phases**: Breakdown of project into logical phases
  - Phase 1: [Description with checklist format]
    - [ ] Task 1
    - [ ] Task 2
  - Phase 2: [Description with checklist format]
    - [ ] Task 1
    - [ ] Task 2
- **Priority Framework**: Identification of must-have vs. nice-to-have elements
- **Risk Assessment**: Potential challenges and mitigation strategies
- **Reference Materials**: Sources, inspirations, or guides to consult

### 5. Project Setup
- **Environment Setup**: Instructions for setting up necessary tools/workspace
- **Structure Organization**: Recommended project organization
  ```
  # For technical projects
  /project-root
  ├── /src
  ├── /docs
  ├── /tests
  └── ...
  
  # For creative projects
  /project-root
  ├── /drafts
  ├── /research
  ├── /assets
  └── ...
  
  # For business projects
  /project-root
  ├── /plans
  ├── /analysis
  ├── /resources
  └── ...
  ```
- **Version Control**: Tracking changes and managing iterations
- **Progress Journal**: Setup and structure for tracking progress

### 6. Workflow Management
- **Agent Workflow**:
  - Update documentation after completing each milestone
  - Track changes appropriately (version control for code, revision history for docs)
    - Initialize the project as a git repository immediately
    - Commit granular updates with meaningful messages
    - Create branches for exploring alternatives
  - Update progress journal with each significant advancement
  - Adhere to project plan while remaining adaptable
  - Confirm current date via terminal before journal updates
  - Request guidance for significant plan deviations
  - Leverage external tools and APIs as appropriate

### 7. Quality Control
- **Review Process**: Approaches to evaluating progress and quality
- **Feedback Integration**: Methods for incorporating feedback
- **Testing/Validation**: Appropriate verification based on project type

### 8. Completion & Delivery
- **Finalization Process**: Steps for completing the project
- **Delivery Method**: How to share, publish, or implement the result
- **Maintenance Plan**: Ongoing support or updates if applicable

### 9. Documentation
- **Project Documentation**: Comprehensive record of the project
- **Process Documentation**: How the project was developed
- **User/Audience Documentation**: Guides for intended users/audience

## Implementation Instructions

When implementing this template for a specific project:

1. Start by asking clarifying questions about project requirements and scope
2. Establish project plan and knowledge base as a living document
3. Create a systematic structure based on project needs
4. Set up progress journal with dated entries for milestone tracking
5. Follow the agent workflow to ensure consistent progress and documentation
6. Adapt the template sections as needed for the specific project type
7. Integrate with external tools and services where beneficial
8. Remain flexible to accommodate evolving project needs

## Project Organization Structure

The project should be organized in a structured, intuitive way:

```
/projects/[project-name]/
├── .cursor/
│   └── rules/            # Cursor project rules
├── docs/                 # Documentation
│   ├── planning/         # Planning documents
│   ├── guides/           # User/developer guides
│   └── specs/            # Technical specifications
├── journal/              # Project progress journal
│   └── entries/          # Individual journal entries by date
├── project-plan.md       # Master project plan with checklists
└── [project-specific folders based on type]
```

These guidelines should be appropriately tailored to the specific project type and requirements.

## ⚠️ FINAL REMINDER ⚠️

This process is ONLY for creating the infrastructure (folders + rules) for the project. 
DO NOT start implementing, coding, writing, or developing any actual project content.
Your work is complete when the folder structure and rules are in place.

## Initial Project Prompt

Include the user's complete initial project prompt here for reference, formatted as a blockquote:

```markdown
> [Insert the user's entire initial project prompt here]
```

This preserves the original project vision as articulated by the user, which can be valuable for maintaining alignment throughout development or when returning to the project after a period of time.