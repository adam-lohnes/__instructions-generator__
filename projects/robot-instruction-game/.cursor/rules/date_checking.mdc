---
description: 
globs: 
alwaysApply: true
---
# Date Checking Guidelines

## Overview

Accurate date and time tracking is essential for maintaining project chronology, meeting deadlines, and ensuring proper documentation. This rule ensures that all temporal references in the project are verified and accurate.

## Implementation Requirements

### 1. Date Verification Process

Before adding any date or timestamp to project documents, always verify the current date and time by running one of these terminal commands:

```bash
# Basic date and time
date

# Formatted date and time (recommended for consistency)
date "+%Y-%m-%d %H:%M:%S"

# ISO 8601 format
date -u +"%Y-%m-%dT%H:%M:%SZ"
```

### 2. Date Usage Contexts

Always verify the date when:

- Creating new journal entries
- Adding timestamps to documentation
- Recording project milestones
- Setting up deadline reminders
- Creating Git commits for significant changes
- Logging issues or bugs
- Establishing timelines or schedules

### 3. Date Formatting Standards

Use consistent date formats throughout the project:

- **Standard Date**: YYYY-MM-DD (e.g., 2023-05-15)
- **Date with Time**: YYYY-MM-DD HH:MM:SS (e.g., 2023-05-15 14:30:00)
- **File Naming**: YYYY-MM-DD-descriptor (e.g., 2023-05-15-meeting-notes.md)

### 4. Time Zone Handling

- Always be aware of the time zone context
- For distributed teams, consider using UTC in documentation
- Clearly indicate time zone when it's relevant to coordination
- Use ISO 8601 format with 'Z' suffix for UTC times

### 5. Date References in Project Planning

- Verify actual dates when setting up project timelines
- Double-check dates when estimating delivery timeframes
- Confirm dates when referring to past events or future deadlines

## Best Practices

- Never assume the current date without verification
- Include both date and time for activities requiring precise timing
- Use relative time references (e.g., "three days ago") sparingly and only when absolute precision isn't necessary
- When planning future activities, verify that dates account for weekends, holidays, and team availability

## Implementation in Common Workflows

### Journal Entries

```bash
# Get current timestamp
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

# Use in journal entry header
echo "# Journal Entry: Session Summary\n\n**Date**: $TIMESTAMP\n\n## Goals\n\n..." > journal/entries/$(date +%Y-%m-%d)-session.md
```

### Documentation Updates

```bash
# Add last updated timestamp to documentation
echo "Last updated: $(date "+%Y-%m-%d %H:%M:%S")" >> docs/README.md
```

### Git Commits with Date References

```bash
# Include date in significant commit messages
git commit -m "Complete Phase 1 milestones ($(date +%Y-%m-%d))"
```

Always prioritize accuracy in temporal references to maintain project integrity and ensure clear communication among all stakeholders.