---
description: This rule provides guidance for designing and implementing the instruction parsing system, which is the core gameplay mechanic of the Robot Instruction Game. The system interprets user-written instructions and translates them into actions for the robot character.
globs: 
alwaysApply: false
---
# Instruction Parsing System Guidelines

## Purpose
This rule provides guidance for designing and implementing the instruction parsing system, which is the core gameplay mechanic of the Robot Instruction Game. The system interprets user-written instructions and translates them into actions for the robot character.

## Design Principles

### User Experience
- **Forgiving**: Accept variations in phrasing and syntax
- **Educational**: Provide helpful feedback on instruction clarity
- **Progressive**: Start simple, gradually introduce complexity
- **Responsive**: Quick feedback on instruction validity
- **Transparent**: Clear indication of how instructions are understood

### Parser Architecture

#### Command Structure
- **Basic Format**: `<verb> <object> [<modifier>]`
  - Example: "move forward three steps"
  - Example: "pick up the blue block"
- **Compound Instructions**: Connect multiple commands with conjunctions
  - Example: "move forward then turn right"
- **Conditional Instructions**: Allow for basic if/then structures
  - Example: "if you see a wall, stop"

#### Supported Command Types
1. **Movement Commands**:
   - Basic directions: forward, backward, left, right
   - Specific distances: number of steps, pixels, or grid units
   - Relative positions: "to the box", "next to the door"

2. **Action Commands**:
   - Interaction: pick up, put down, push, pull
   - Examination: look at, check, inspect
   - Special actions: jump, rotate, blink, etc.

3. **Sequence Commands**:
   - Order: first, then, after, finally
   - Repetition: repeat, loop, three times
   - Delay: wait, pause, until

## Implementation Approach

### Parsing Technologies
- **Recommended Approach**: Custom lightweight parser using regular expressions for pattern matching
- **Alternative Approach**: Natural language processing library (if complexity warrants)
- **Simplest Approach**: Keyword matching with distance metrics for variations

### Processing Steps
1. **Tokenization**: Break instruction into words/phrases
2. **Command Identification**: Recognize verbs and action words
3. **Parameter Extraction**: Identify objects, quantities, and modifiers
4. **Validation**: Check for completeness and executability
5. **Translation**: Convert to internal command representation
6. **Execution**: Trigger appropriate robot animations and state changes

### Error Handling
- **Unknown Commands**: Graceful handling with suggestions
- **Ambiguous Instructions**: Request clarification
- **Impossible Actions**: Clear explanation of limitations
- **Partial Understanding**: Execute what is understood, ask about the rest

## Feedback System

### Feedback Types
- **Visual Highlights**: Color-code recognized commands
- **Syntax Suggestions**: Offer corrections for almost-right instructions
- **Command Recognition**: Show which parts were understood
- **Success Indicators**: Clear signal when instructions are fully parsed
- **Error Indications**: Specific feedback on problematic parts

### Learning Progression
- **Level 1**: Simple single commands with exact wording
- **Level 2**: Single commands with flexible phrasing
- **Level 3**: Sequence of two commands
- **Level 4**: Complex sequences with modifiers
- **Level 5**: Conditional statements and loops

## Challenge Design

### Challenge Structure
- **Goal State**: Clear visual indication of what must be achieved
- **Starting State**: Initial robot and environment configuration
- **Constraint**: Optional limitations on available commands
- **Success Criteria**: Specific conditions that must be met
- **Hint System**: Progressive clues if user struggles

### Challenge Progression
- Introduce new command types gradually
- Build complexity by combining previously learned concepts
- Provide sandbox mode for experimentation
- Include replays of successful solutions

## Technical Implementation

### Code Organization
- **Parser Module**: Separate from game UI and robot control
- **Command Registry**: Extensible system for adding new commands
- **Feedback Generator**: Analyzes parse results to provide guidance
- **Execution Engine**: Converts parsed commands to animation sequences

### Performance Considerations
- Optimize for real-time feedback during typing
- Consider throttling parse attempts during continuous input
- Cache common instruction patterns
- Balance between precision and flexibility

## Testing Framework

### Parser Testing
- Unit tests for individual command recognition
- Integration tests for compound instructions
- Edge case tests for ambiguous or complex instructions
- Accessibility testing for different instruction styles

### User Testing
- Observe common instruction patterns from new users
- Identify frustration points in the instruction system
- Track successful vs. unsuccessful instruction attempts
- Use insights to refine parser flexibility

## Implementation Checklist

- [ ] Define core command vocabulary and syntax
- [ ] Implement basic command parser with regex patterns
- [ ] Create feedback visualization system
- [ ] Develop error handling and suggestion system
- [ ] Connect parser to robot animation system
- [ ] Create progression of instruction complexity
- [ ] Design initial set of parsing challenges
- [ ] Implement sandbox mode for free experimentation
- [ ] Test parser with diverse instruction styles