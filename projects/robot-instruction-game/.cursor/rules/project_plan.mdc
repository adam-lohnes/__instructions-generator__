---
description: 
globs: 
alwaysApply: true
---
# Project Plan Management Guidelines

## Overview

The project plan serves as the central roadmap for project execution, breaking down the overall project into manageable phases and specific tasks. This rule ensures the project plan is comprehensive, granular, and consistently maintained throughout the project lifecycle.

## Project Plan Structure

### 1. Plan Components

A complete project plan should include:

- **Project Overview**: Brief summary of the project's purpose and goals
- **Phase Breakdown**: Division of the project into logical sequential phases
- **Task Lists**: Granular checklist of specific tasks within each phase
- **Timeline Estimates**: Approximate time requirements for phases and tasks
- **Dependencies**: Identification of tasks that rely on others
- **Milestones**: Key checkpoints that indicate significant progress
- **Priority Levels**: Designation of must-have vs. nice-to-have elements
- **Status Tracking**: Current completion state of each task

### 2. Task Granularity

Tasks should be:

- **Specific**: Clearly defined with concrete objectives
- **Measurable**: Completion can be objectively verified
- **Actionable**: Directly implementable without further breakdown
- **Relevant**: Directly contributes to project goals
- **Small**: Completable within a reasonable timeframe (typically hours, not days)

## Implementation Requirements

### 1. Plan Format

Use a structured Markdown format with nested checklists:

```markdown
# Project Plan: [Project Name]

## Project Overview
[Brief description of project purpose and goals]

## Phase 1: [Phase Name]
[Description of this phase's objectives]

### High Priority
- [ ] Task 1.1: [Description]
  - Dependencies: None
  - Est. Time: X hours
  - Notes: [Any relevant details]
- [ ] Task 1.2: [Description]
  - Dependencies: Task 1.1
  - Est. Time: X hours
  - Notes: [Any relevant details]

### Medium Priority
- [ ] Task 1.3: [Description]
  - Dependencies: None
  - Est. Time: X hours
  - Notes: [Any relevant details]

## Phase 2: [Phase Name]
[Description of this phase's objectives]

### High Priority
- [ ] Task 2.1: [Description]
  - Dependencies: Task 1.2
  - Est. Time: X hours
  - Notes: [Any relevant details]
...
```

### 2. Task Status Tracking

Use GitHub-style task lists for easy tracking:

- `- [ ]` for incomplete tasks
- `- [x]` for completed tasks
- Consider adding status indicators for in-progress or blocked tasks:
  - `- [~]` for in-progress tasks
  - `- [!]` for blocked tasks

### 3. Plan Maintenance Procedures

- Review and update the project plan regularly during each working session
- Mark tasks as complete as they are finished
- Add new tasks as they are identified
- Adjust priorities based on evolving project needs
- Update time estimates based on actual experience
- Document any deviations from the original plan

## Best Practices

### 1. Plan Development

- Create an initial draft plan at project inception
- Refine the plan after initial research and exploration
- Include stakeholder input when defining phases and priorities
- Reference similar projects for task identification

### 2. Ongoing Management

- Keep the plan visible and accessible at all times
- Reference the plan before starting each work session
- Update task status immediately upon completion
- Regularly review for missed or emerging tasks
- Note reasons for significant deviations

### 3. Completion Criteria

- Review all tasks for completion before considering a phase done
- Document lessons learned at the end of each phase
- Conduct a retrospective analysis comparing the plan to actual execution

## Integration with Project Workflow

- Cross-reference tasks in journal entries
- Mention task IDs in commit messages
- Include plan reviews in milestone completion checklists
- Update documentation with plan changes

Remember that the project plan is a living document designed to guide work rather than constrain it. Adapt the plan as needed while maintaining a clear record of the project's evolution.