---
description: This rule provides guidance for designing and implementing the robot character, which is the central element of the Robot Instruction Game. The character needs to be visually appealing, responsive to instructions, and capable of expressing various states through animations.
globs: 
alwaysApply: false
---
# Robot Character Design Guidelines

## Purpose
This rule provides guidance for designing and implementing the robot character, which is the central element of the Robot Instruction Game. The character needs to be visually appealing, responsive to instructions, and capable of expressing various states through animations.

## Character Design Principles

### Visual Style
- **Friendly and Approachable**: The robot should appear non-threatening and likable
- **Simple but Expressive**: Minimal design that can still convey a range of emotions
- **Memorable**: Distinct silhouette and color scheme
- **Responsive**: Design should accommodate various animation states
- **Scalable**: Character should look good at different sizes across devices

### Core Visual Elements
- **Body Shape**: Rounded, geometric forms that suggest friendliness
- **Face/Display**: Simple expressions that clearly communicate states
- **Color Palette**: 
  - Primary: Bright, cheerful base color (#4A90E2 blue suggested)
  - Secondary: Contrasting accent color for highlights (#50E3C2 teal suggested)
  - Neutral: Light gray for body elements (#F5F7FA suggested)
- **Proportions**: Slightly oversized head/face area to emphasize expressions

## Animation States

### Required Animation States
1. **Idle**: Subtle movement showing the robot is "alive" and waiting
2. **Listening**: Indication that the robot is processing instructions
3. **Success**: Celebration animation when instructions are followed correctly
4. **Error**: Confused or disappointed reaction when instructions aren't understood
5. **Thinking**: Processing animation when analyzing complex instructions
6. **Specific Action States**: Custom animations for key instruction types:
   - Movement (left, right, up, down)
   - Interaction (picking up, putting down)
   - Special actions relevant to game challenges

### Animation Principles
- **Anticipation**: Brief windup before main action
- **Squash and Stretch**: Subtle deformation to suggest weight and flexibility
- **Follow-through**: Movement doesn't stop abruptly
- **Timing**: Quick enough to not impede gameplay, expressive enough to be satisfying
- **Easing**: Natural acceleration/deceleration curves

## Technical Implementation

### Recommended Approaches
- **SVG-based Animation**: Scalable and lightweight
- **CSS Animation**: For simpler states and transitions
- **JavaScript Animation Libraries**: For more complex sequences (consider Framer Motion, GSAP, or Lottie)
- **Sprite Sheets**: If many complex animations are needed

### Performance Considerations
- Optimize animations for mobile devices
- Consider reduced motion preferences for accessibility
- Ensure animations don't block gameplay or instruction processing
- Implement proper caching of animation assets

## Integration with Instruction System

### Mapping Instructions to Animations
- Create clear connections between user instructions and visual feedback
- Ensure timing alignment between instruction processing and animation triggers
- Develop fallback animations for unexpected instruction combinations

### Feedback Clarity
- Animation should clearly communicate whether instructions were understood
- Success/failure states should be visually distinct
- Partial success should have appropriate visual representation

## Character Personality

### Behavioral Traits
- **Eager to Help**: Shows enthusiasm for receiving instructions
- **Resilient**: Remains positive even after repeated errors
- **Encouraging**: Celebrates user success warmly
- **Patient**: Never appears annoyed or frustrated with the user
- **Curious**: Shows interest in new instructions or challenges

### Communication Style
- Non-verbal communication through animation and visual cues
- Optional simple sound effects to reinforce states
- Potential for simple text bubbles for direct feedback (use sparingly)

## Implementation Checklist

- [ ] Create initial robot character design sketches
- [ ] Develop finalized SVG assets for base character
- [ ] Implement idle animation state
- [ ] Create core feedback animations (success, error)
- [ ] Develop action-specific animations
- [ ] Integrate character with instruction processing system
- [ ] Optimize animations for performance
- [ ] Test character visibility and animation clarity across devices
- [ ] Implement accessibility considerations