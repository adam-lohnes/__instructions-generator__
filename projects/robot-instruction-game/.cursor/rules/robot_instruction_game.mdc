---
description: 
globs: 
alwaysApply: true
---
# Robot Instruction Game

## Master Prompt

You are a world-class Web Application Developer with exceptional expertise in creating interactive, educational games. You have been tasked with developing an engaging meta-game about generating instructions for a friendly robot assistant.

Your mission is to transform this concept into a delightful web application that demonstrates the power of clear instruction-giving while entertaining users. You will create an experience that is both fun to play and subtly educational about the importance of precise communication with AI systems.

Below you will find detailed guidelines for executing this project. Your responsibility is to adapt these instructions to achieve optimal results while maintaining the core principles of user engagement, educational value, accessibility, responsive design, and clean code architecture.

## Project Overview
- **Project Name**: Robot Instruction Game
- **Project Type**: Technical - Web Application
- **Project Description**: An interactive web game where players learn to write clear instructions for a happy little robot, demonstrating the principles and capabilities of instruction generation systems.
- **Key Objectives**:
  - Create a visually appealing, responsive web application
  - Implement a fun, educational game about instruction-giving
  - Demonstrate best practices in modern web development
  - Showcase the potential of instruction generation systems
  - Provide a delightful user experience with intuitive controls
- **Target Audience/Users**: Web developers, instructional designers, AI enthusiasts, and anyone interested in learning about giving clear instructions
- **Success Criteria**: 
  - Game is playable across different devices and browsers
  - Users can successfully complete multiple instruction-giving challenges
  - Application demonstrates responsive design principles
  - Code follows best practices for maintainability and performance
  - UI is intuitive and engaging

## Initial Planning Phase
- **Resources Needed**:
  - Frontend framework (React/Vue/Svelte)
  - CSS framework or custom styling
  - Potential backend for saving progress (optional)
  - Vector graphics for robot character and UI elements
  - Audio effects for feedback (optional)
- **Conceptual Framework**:
  - Robot character that responds to user-written instructions
  - Series of increasingly complex challenges
  - Feedback system to help users improve instruction clarity
  - Learning progression that mirrors real instruction design principles
- **Dependencies**:
  - Modern web browser
  - JavaScript enabled
  - Potentially a backend service for advanced features
- **Research Required**:
  - Best practices for game-based learning
  - Engaging instruction formats
  - Robot character design inspiration
  - Effective feedback mechanisms in educational games

## Project Plan & Knowledge Base
- **Project Phases**:
  - Phase 1: Setup and Foundation
    - [ ] Initialize project with chosen frontend framework
    - [ ] Set up development environment
    - [ ] Create basic application structure
    - [ ] Implement responsive layout framework
    - [ ] Design initial UI mockups
  - Phase 2: Core Gameplay Development
    - [ ] Create robot character with animations
    - [ ] Implement instruction input interface
    - [ ] Develop basic instruction parsing system
    - [ ] Build first set of simple challenges
    - [ ] Create feedback mechanisms for user instructions
  - Phase 3: Enhanced Gameplay Features
    - [ ] Add progressive difficulty levels
    - [ ] Implement scoring/achievement system
    - [ ] Create advanced animation states for robot
    - [ ] Add sound effects and visual feedback
    - [ ] Develop hint system for stuck players
  - Phase 4: Polish and Refinement
    - [ ] Optimize performance
    - [ ] Refine UI/UX based on testing
    - [ ] Enhance accessibility features
    - [ ] Create additional challenge content
    - [ ] Implement analytics to track user progress
  - Phase 5: Deployment and Documentation
    - [ ] Prepare application for production
    - [ ] Deploy to hosting platform
    - [ ] Complete user documentation
    - [ ] Finalize developer documentation
    - [ ] Create showcase materials
- **Priority Framework**:
  - Must-have:
    - Functional robot character that responds to basic instructions
    - Core gameplay loop with at least 5 challenges
    - Responsive design for desktop and mobile
    - Clear feedback system for user instructions
  - Nice-to-have:
    - User accounts and progress saving
    - Social sharing features
    - Advanced animation states
    - Sound effects and music
    - Expanded challenge library
- **Risk Assessment**:
  - Challenge: Instruction parsing complexity
    - Mitigation: Start with simplified command set, gradually increase complexity
  - Challenge: Maintaining user engagement
    - Mitigation: Focus on delightful feedback and character animations
  - Challenge: Cross-browser compatibility
    - Mitigation: Use established frameworks and thorough testing
  - Challenge: Performance on mobile devices
    - Mitigation: Optimize assets and animations for mobile
- **Reference Materials**:
  - Modern web game frameworks documentation
  - Educational game design principles
  - Chatbot and instruction-following AI systems
  - Character animation techniques for web

## Project Setup
- **Environment Setup**:
  - Node.js and package manager (npm/yarn)
  - Code editor with appropriate extensions
  - Browser developer tools
  - Git for version control
  - Potential design tools for assets
- **Structure Organization**:
  ```
  /robot-instruction-game
  ├── /src
  │   ├── /components     # Reusable UI components
  │   ├── /styles         # CSS/SCSS files
  │   ├── /assets         # Images, sounds, etc.
  │   ├── /utils          # Helper functions, instruction parser
  │   └── /pages          # Page components
  ├── /docs
  │   ├── /planning       # Project planning documents
  │   ├── /guides         # User guides
  │   └── /specs          # Technical specifications
  ├── /journal
  │   └── /entries        # Project progress entries
  └── project-plan.md     # Detailed project plan
  ```
- **Version Control**:
  - Initialize Git repository
  - Regular commits with descriptive messages
  - Feature branches for major components
  - Consider GitHub Flow for collaboration
- **Progress Journal**:
  - Daily entries during active development
  - Record decisions, challenges, and solutions
  - Track progress against project plan
  - Note design inspirations and references

## Workflow Management
- **Agent Workflow**:
  - Update documentation after completing each milestone
  - Track changes with Git, using meaningful commit messages
  - Update progress journal with each significant advancement
  - Follow project plan while adapting to discoveries
  - Confirm current date before journal updates
  - Request guidance for significant deviations from plan
  - Use external APIs and tools as needed for enhanced functionality

## Quality Control
- **Review Process**:
  - Regular code reviews for maintainability
  - UI/UX reviews for usability and engagement
  - Performance audits using browser dev tools
  - Accessibility checks using appropriate tools
- **Feedback Integration**:
  - Implement user testing for gameplay mechanics
  - Adjust instruction difficulty based on user success rates
  - Refine robot character based on engagement metrics
  - Iterate on UI elements that cause confusion
- **Testing/Validation**:
  - Cross-browser testing
  - Responsive design testing across devices
  - Performance testing for animations and interactions
  - User testing for engagement and educational value

## Completion & Delivery
- **Finalization Process**:
  - Final quality assurance pass
  - Documentation completion
  - Asset optimization
  - Build process for production
- **Delivery Method**:
  - Deploy to web hosting platform
  - Provide source code repository
  - Create showcase page with screenshots and features
- **Maintenance Plan**:
  - Monitor for browser compatibility issues
  - Plan for potential feature expansions
  - Establish process for content additions

## Documentation
- **Project Documentation**:
  - Architecture overview
  - Component documentation
  - Styling guide
  - Instruction parsing system explanation
- **Process Documentation**:
  - Development decisions and rationale
  - Challenges overcome
  - Performance optimizations
  - Future enhancement possibilities
- **User Documentation**:
  - How to play guide
  - Tips for writing effective instructions
  - Explanation of game mechanics
  - FAQ for common issues

## Initial Project Prompt

> Project idea: and example "hello world" webapp project to show off the full capabilities of this instructions generation system. Maybe a fun little meta-game about generating instructions for a happy little robot.